/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TornadoPoolInterface extends ethers.utils.Interface {
  functions: {
    "FIELD_SIZE()": FunctionFragment;
    "MAX_EXT_AMOUNT()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "MIN_EXT_AMOUNT_LIMIT()": FunctionFragment;
    "ROOT_HISTORY_SIZE()": FunctionFragment;
    "ZERO_VALUE()": FunctionFragment;
    "ambBridge()": FunctionFragment;
    "calculatePublicAmount(int256,uint256)": FunctionFragment;
    "configureLimits(uint256,uint256)": FunctionFragment;
    "currentRootIndex()": FunctionFragment;
    "filledSubtrees(uint256)": FunctionFragment;
    "getLastRoot()": FunctionFragment;
    "hashLeftRight(bytes32,bytes32)": FunctionFragment;
    "hasher()": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "isCalledByOwner()": FunctionFragment;
    "isKnownRoot(bytes32)": FunctionFragment;
    "isSpent(bytes32)": FunctionFragment;
    "l1Unwrapper()": FunctionFragment;
    "lastBalance()": FunctionFragment;
    "levels()": FunctionFragment;
    "maximumDepositAmount()": FunctionFragment;
    "minimalWithdrawalAmount()": FunctionFragment;
    "multisig()": FunctionFragment;
    "nextIndex()": FunctionFragment;
    "nullifierHashes(bytes32)": FunctionFragment;
    "omniBridge()": FunctionFragment;
    "onTokenBridged(address,uint256,bytes)": FunctionFragment;
    "onTransact(tuple,tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerChainId()": FunctionFragment;
    "register(tuple)": FunctionFragment;
    "registerAndTransact(tuple,tuple,tuple)": FunctionFragment;
    "rescueTokens(address,address,uint256)": FunctionFragment;
    "roots(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transact(tuple,tuple)": FunctionFragment;
    "verifier16()": FunctionFragment;
    "verifier2()": FunctionFragment;
    "verifyProof(tuple)": FunctionFragment;
    "zeros(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_EXT_AMOUNT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ambBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePublicAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCalledByOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isSpent", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "l1Unwrapper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maximumDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimalWithdrawalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "multisig", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "omniBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenBridged",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransact",
    values: [
      {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [{ owner: string; publicKey: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndTransact",
    values: [
      { owner: string; publicKey: BytesLike },
      {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transact",
    values: [
      {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifier16",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifier2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_EXT_AMOUNT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ambBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePublicAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCalledByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1Unwrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimalWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multisig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "omniBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTokenBridged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onTransact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAndTransact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;

  events: {
    "NewCommitment(bytes32,uint256,bytes)": EventFragment;
    "NewNullifier(bytes32)": EventFragment;
    "PublicKey(address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNullifier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicKey"): EventFragment;
}

export class TornadoPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TornadoPoolInterface;

  functions: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_EXT_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<[number]>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ambBridge(overrides?: CallOverrides): Promise<[string]>;

    calculatePublicAmount(
      _extAmount: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    configureLimits(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRootIndex(overrides?: CallOverrides): Promise<[number]>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastRoot(overrides?: CallOverrides): Promise<[string]>;

    hashLeftRight(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasher(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCalledByOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSpent(
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1Unwrapper(overrides?: CallOverrides): Promise<[string]>;

    lastBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    levels(overrides?: CallOverrides): Promise<[number]>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    multisig(overrides?: CallOverrides): Promise<[string]>;

    nextIndex(overrides?: CallOverrides): Promise<[number]>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    omniBridge(overrides?: CallOverrides): Promise<[string]>;

    onTokenBridged(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onTransact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerChainId(overrides?: CallOverrides): Promise<[string]>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueTokens(
      _token: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier16(overrides?: CallOverrides): Promise<[string]>;

    verifier2(overrides?: CallOverrides): Promise<[string]>;

    verifyProof(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_EXT_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

  ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  ambBridge(overrides?: CallOverrides): Promise<string>;

  calculatePublicAmount(
    _extAmount: BigNumberish,
    _fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  configureLimits(
    _minimalWithdrawalAmount: BigNumberish,
    _maximumDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRootIndex(overrides?: CallOverrides): Promise<number>;

  filledSubtrees(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastRoot(overrides?: CallOverrides): Promise<string>;

  hashLeftRight(
    _left: BytesLike,
    _right: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hasher(overrides?: CallOverrides): Promise<string>;

  initialize(
    _minimalWithdrawalAmount: BigNumberish,
    _maximumDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCalledByOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isSpent(
    _nullifierHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1Unwrapper(overrides?: CallOverrides): Promise<string>;

  lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

  levels(overrides?: CallOverrides): Promise<number>;

  maximumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minimalWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  multisig(overrides?: CallOverrides): Promise<string>;

  nextIndex(overrides?: CallOverrides): Promise<number>;

  nullifierHashes(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  omniBridge(overrides?: CallOverrides): Promise<string>;

  onTokenBridged(
    _token: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onTransact(
    _args: {
      proof: BytesLike;
      root: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
      isL1Withdrawal: boolean;
      l1Fee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerChainId(overrides?: CallOverrides): Promise<string>;

  register(
    _account: { owner: string; publicKey: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAndTransact(
    _account: { owner: string; publicKey: BytesLike },
    _proofArgs: {
      proof: BytesLike;
      root: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
      isL1Withdrawal: boolean;
      l1Fee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueTokens(
    _token: string,
    _to: string,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  transact(
    _args: {
      proof: BytesLike;
      root: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    _extData: {
      recipient: string;
      extAmount: BigNumberish;
      relayer: string;
      fee: BigNumberish;
      encryptedOutput1: BytesLike;
      encryptedOutput2: BytesLike;
      isL1Withdrawal: boolean;
      l1Fee: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier16(overrides?: CallOverrides): Promise<string>;

  verifier2(overrides?: CallOverrides): Promise<string>;

  verifyProof(
    _args: {
      proof: BytesLike;
      root: BytesLike;
      inputNullifiers: BytesLike[];
      outputCommitments: [BytesLike, BytesLike];
      publicAmount: BigNumberish;
      extDataHash: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_EXT_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<number>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    ambBridge(overrides?: CallOverrides): Promise<string>;

    calculatePublicAmount(
      _extAmount: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureLimits(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRootIndex(overrides?: CallOverrides): Promise<number>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastRoot(overrides?: CallOverrides): Promise<string>;

    hashLeftRight(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hasher(overrides?: CallOverrides): Promise<string>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isCalledByOwner(overrides?: CallOverrides): Promise<boolean>;

    isKnownRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isSpent(
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1Unwrapper(overrides?: CallOverrides): Promise<string>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<number>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    multisig(overrides?: CallOverrides): Promise<string>;

    nextIndex(overrides?: CallOverrides): Promise<number>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    omniBridge(overrides?: CallOverrides): Promise<string>;

    onTokenBridged(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    onTransact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerChainId(overrides?: CallOverrides): Promise<string>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    rescueTokens(
      _token: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    transact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    verifier16(overrides?: CallOverrides): Promise<string>;

    verifier2(overrides?: CallOverrides): Promise<string>;

    verifyProof(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewCommitment(
      commitment?: null,
      index?: null,
      encryptedOutput?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { commitment: string; index: BigNumber; encryptedOutput: string }
    >;

    NewNullifier(
      nullifier?: null
    ): TypedEventFilter<[string], { nullifier: string }>;

    PublicKey(
      owner?: string | null,
      key?: null
    ): TypedEventFilter<[string, string], { owner: string; key: string }>;
  };

  estimateGas: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_EXT_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    ambBridge(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePublicAmount(
      _extAmount: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configureLimits(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRootIndex(overrides?: CallOverrides): Promise<BigNumber>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hashLeftRight(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasher(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCalledByOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSpent(
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1Unwrapper(overrides?: CallOverrides): Promise<BigNumber>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    levels(overrides?: CallOverrides): Promise<BigNumber>;

    maximumDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minimalWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    multisig(overrides?: CallOverrides): Promise<BigNumber>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    omniBridge(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenBridged(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onTransact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerChainId(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueTokens(
      _token: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roots(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier16(overrides?: CallOverrides): Promise<BigNumber>;

    verifier2(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProof(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FIELD_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_EXT_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_EXT_AMOUNT_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROOT_HISTORY_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ambBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePublicAmount(
      _extAmount: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    configureLimits(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRootIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filledSubtrees(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashLeftRight(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _minimalWithdrawalAmount: BigNumberish,
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCalledByOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isKnownRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpent(
      _nullifierHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1Unwrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    levels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimalWithdrawalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullifierHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    omniBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenBridged(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onTransact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      _account: { owner: string; publicKey: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAndTransact(
      _account: { owner: string; publicKey: BytesLike },
      _proofArgs: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueTokens(
      _token: string,
      _to: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transact(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      _extData: {
        recipient: string;
        extAmount: BigNumberish;
        relayer: string;
        fee: BigNumberish;
        encryptedOutput1: BytesLike;
        encryptedOutput2: BytesLike;
        isL1Withdrawal: boolean;
        l1Fee: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier16(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProof(
      _args: {
        proof: BytesLike;
        root: BytesLike;
        inputNullifiers: BytesLike[];
        outputCommitments: [BytesLike, BytesLike];
        publicAmount: BigNumberish;
        extDataHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zeros(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
